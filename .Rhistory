plot(slope_degrees_cut)
title("Slope Degrees")
dev.off()
# Chunk 25
if (!file.exists(paste("Data/Environmental_data/Slope Percent Rise/Tif/LH20_SlpP_220_", chosen_island, ".Rdata", sep=""))){
slope_percent_rise <- raster("Data/Environmental_data/Slope Percent Rise/Tif/LH20_SlpP_220.tif")
slope_percent_rise_cut <- crop(slope_percent_rise, chosen_map_nad83)
slope_percent_rise_cut <- mask(slope_percent_rise_cut, chosen_map_nad83)
#this takes a while to run
slope_percent_rise_cut <- projectRaster(slope_percent_rise_cut, cloud_frequency_cut)
save(slope_percent_rise_cut, file = paste("Data/Environmental_data/Slope Percent Rise/Tif/LH20_SlpP_220_", chosen_island, ".Rdata", sep=""))
rm(slope_percent_rise)
gc()
} else {
load(paste("Data/Environmental_data/Slope Percent Rise/Tif/LH20_SlpP_220_", chosen_island, ".Rdata", sep=""))
}
png(filename=paste("Outputs/Env_output_plots/slope_percent_rise_", chosen_island, ".png", sep=""))
plot(slope_percent_rise_cut)
title("Slope Percent Rise")
dev.off()
# Chunk 27
soil_evaporation <- raster("Data/Environmental_data/Soil Evaporation/mm/SoilEvaporation_mm_month_raster/soil_evaporation_mm_month_raster/se_mm_ann/prj.adf")
#soil_evaporation <- projectRaster(soil_evaporation, crs = project_crs)
soil_evaporation_cut <- mask(soil_evaporation, chosen_map)
soil_evaporation_cut <- crop(soil_evaporation_cut, chosen_map)
png(filename=paste("Outputs/Env_output_plots/soil_evaporation_", chosen_island, ".png", sep=""))
plot(soil_evaporation_cut)
title("Soil Evaporation")
dev.off()
# Chunk 28
if (!file.exists(paste("Data/Environmental_data/Soil Fertility Class/FertilityClass_State_wgs84_", chosen_island, ".shp", sep=""))){
soil_fertility_class <- vect("Data/Environmental_data/Soil Fertility Class/FertilityClass_State.shp")
#soil_fertility_class_cut <- mask(soil_fertility_class, chosen_map)
soil_fertility_class_cut <- crop(soil_fertility_class, chosen_map_utm4N)
soil_fertility_class_cut <- project(soil_fertility_class_cut, cloud_frequency_cut)
writeVector(soil_fertility_class_cut, paste("Data/Environmental_data/Soil Fertility Class/FertilityClass_State_wgs84_", chosen_island, ".shp", sep=""))
rm(soil_fertility_class)
gc()
} else {
soil_fertility_class_cut <- vect(paste("Data/Environmental_data/Soil Fertility Class/FertilityClass_State_wgs84_", chosen_island, ".shp", sep=""))
}
ncols <- length(unique(soil_fertility_class_cut$FertClass))
cols=sample(col_vector_random, ncols)
soil_colors <- cols[as.factor(soil_fertility_class_cut$FertClass)]
png(filename=paste("Outputs/Env_output_plots/soil_fertility_class_", chosen_island, ".png", sep=""))
plot(soil_fertility_class_cut, col=soil_colors, border=NA)
title("Soil Fertility Class")
legend("bottomright",   # location of legend
legend=unique(soil_fertility_class_cut$FertClass),
fill=cols)
dev.off()
# Chunk 29
if (!file.exists(paste("Data/Environmental_data/Soil Nutrient Holding Capacity/CEC_State_wgs84_", chosen_island, ".shp", sep=""))){
soil_nutrient_holding_capacity <- vect("Data/Environmental_data/Soil Nutrient Holding Capacity/CEC_State.shp")
#soil_nutrient_holding_capacity_cut <- mask(soil_nutrient_holding_capacity, chosen_map)
soil_nutrient_holding_capacity_cut <- crop(soil_nutrient_holding_capacity, chosen_map_utm4N)
soil_nutrient_holding_capacity_cut <- project(soil_nutrient_holding_capacity_cut, cloud_frequency_cut)
writeVector(soil_nutrient_holding_capacity_cut, paste("Data/Environmental_data/Soil Nutrient Holding Capacity/CEC_State_wgs84_", chosen_island, ".shp", sep=""))
rm(soil_nutrient_holding_capacity)
gc()
} else {
soil_nutrient_holding_capacity_cut <- vect(paste("Data/Environmental_data/Soil Nutrient Holding Capacity/CEC_State_wgs84_", chosen_island, ".shp", sep=""))
}
ncols <- length(unique(soil_nutrient_holding_capacity_cut$CECmod_rep) - 1)
cols <- col_vector_ordered(ncols)
#change 0 to gray since 0 is N/A
cols <- c("gray", cols)
soil_colors <- cols[as.factor(soil_nutrient_holding_capacity_cut$CECmod_rep)]
png(filename=paste("Outputs/Env_output_plots/soil_nutrient_holding_capacity_", chosen_island, ".png", sep=""))
plot(soil_nutrient_holding_capacity_cut, col=soil_colors, border=NA)
title("Soil Nutrient Holding Capacity")
legend <- c("Not Available", "Low", "Moderate", "High", "Very High")
cols <- col_vector_ordered(length(legend) - 1)
cols <- c("gray", cols)
legend("bottomright",   # location of legend
legend=legend,
fill=cols)
dev.off()
# Chunk 31
if (!file.exists(paste("Data/Environmental_data/Soil Organic Matter/OrganicMatter_State_wgs84_", chosen_island, ".shp", sep=""))){
soil_organic_matter <- vect("Data/Environmental_data/Soil Organic Matter/OrganicMatter_State.shp")
soil_organic_matter_cut <- crop(soil_organic_matter, chosen_map_utm4N)
soil_organic_matter_cut <- project(soil_organic_matter_cut, cloud_frequency_cut)
writeVector(soil_organic_matter_cut, paste("Data/Environmental_data/Soil Organic Matter/OrganicMatter_State_wgs84_", chosen_island, ".shp", sep=""))
rm(soil_organic_matter)
gc()
} else {
soil_organic_matter_cut <- vect(paste("Data/Environmental_data/Soil Organic Matter/OrganicMatter_State_wgs84_", chosen_island, ".shp", sep=""))
}
ncols <- length(unique(soil_organic_matter_cut$OM_rep) - 1)
cols <- col_vector_ordered(ncols)
#change 0 to gray since 0 is N/A
cols <- c("gray", cols)
soil_colors <- cols[as.factor(soil_organic_matter_cut$OM_rep)]
png(filename=paste("Outputs/Env_output_plots/soil_organic_matter_", chosen_island, ".png", sep=""))
plot(soil_organic_matter_cut, col=soil_colors, border=NA)
title("Soil Organic Matter")
legend <- c("Not Available", "Low", "Moderate", "High", "Very High")
cols <- col_vector_ordered(length(legend) - 1)
cols <- c("gray", cols)
legend("bottomright",   # location of legend
legend=legend,
fill=cols)
dev.off()
# Chunk 32
if (!file.exists(paste("Data/Environmental_data/Soil pH/pH_State_wgs84_", chosen_island, ".shp", sep=""))){
soil_ph <- vect("Data/Environmental_data/Soil pH/pH_State.shp")
soil_ph_cut <- crop(soil_ph, chosen_map_utm4N)
soil_ph_cut <- project(soil_ph_cut, cloud_frequency_cut)
writeVector(soil_ph_cut, paste("Data/Environmental_data/Soil pH/pH_State_wgs84_", chosen_island, ".shp", sep=""))
rm(soil_ph)
gc()
} else {
soil_ph_cut <- vect(paste("Data/Environmental_data/Soil pH/pH_State_wgs84_", chosen_island, ".shp", sep=""))
}
ncols <- length(unique(soil_ph_cut$pHmod_rep) - 1)
cols <- col_vector_ordered(ncols)
#change 0 to gray since 0 is N/A
cols <- c("gray", cols)
soil_colors <- cols[as.factor(soil_ph_cut$pHmod_rep)]
png(filename=paste("Outputs/Env_output_plots/soil_ph_", chosen_island, ".png", sep=""))
plot(soil_ph_cut, col=soil_colors, border=NA)
title("Soil pH")
legend <- c("Not Available", "Acidic", "Slightly Acidic to Neutral", "Slightly Alkaline to Alkaline")
cols <- col_vector_ordered(length(legend) - 1)
cols <- c("gray", cols)
legend("bottomright",   # location of legend
legend=legend,
fill=cols)
dev.off()
# Chunk 33
if (!file.exists(paste("Data/Environmental_data/Soil Shrink and Swell/ShrinkSwell_State_wgs84_", chosen_island, ".shp", sep=""))){
soil_shrink_and_swell <- vect("Data/Environmental_data/Soil Shrink and Swell/ShrinkSwell_State.shp")
soil_shrink_and_swell_cut <- crop(soil_shrink_and_swell, chosen_map_utm4N)
soil_shrink_and_swell_cut <- project(soil_shrink_and_swell_cut, cloud_frequency_cut)
writeVector(soil_shrink_and_swell_cut, paste("Data/Environmental_data/Soil Shrink and Swell/ShrinkSwell_State_wgs84_", chosen_island, ".shp", sep=""))
rm(soil_shrink_and_swell)
gc()
} else {
soil_shrink_and_swell_cut <- vect(paste("Data/Environmental_data/Soil Shrink and Swell/ShrinkSwell_State_wgs84_", chosen_island, ".shp", sep=""))
}
ncols <- length(unique(soil_shrink_and_swell_cut$COLE_rep))
cols <- col_vector_ordered(ncols)
soil_colors <- cols[as.factor(soil_shrink_and_swell_cut$COLE_rep)]
png(filename=paste("Outputs/Env_output_plots/soil_shrink_and_swell_", chosen_island, ".png", sep=""))
plot(soil_shrink_and_swell_cut, col=soil_colors, border=NA)
title("Soil Shrink and Swell")
legend <- c("Low", "Moderate", "High", "Very High")
cols <- col_vector_ordered(length(legend))
legend("bottomright",   # location of legend
legend=legend,
fill=cols)
dev.off()
# Chunk 34
if (!file.exists(paste("Data/Environmental_data/Soil Water Permeability/WaterPermeability_State_wgs84_", chosen_island, ".shp", sep=""))){
soil_water_permeability <- vect("Data/Environmental_data/Soil Water Permeability/WaterPermeability_State.shp")
soil_water_permeability_cut <- crop(soil_water_permeability, chosen_map_utm4N)
soil_water_permeability_cut <- project(soil_water_permeability_cut, cloud_frequency_cut)
writeVector(soil_water_permeability_cut, paste("Data/Environmental_data/Soil Water Permeability/WaterPermeability_State_wgs84_", chosen_island, ".shp", sep=""))
rm(soil_water_permeability)
gc()
} else {
soil_water_permeability_cut <- vect(paste("Data/Environmental_data/Soil Water Permeability/WaterPermeability_State_wgs84_", chosen_island, ".shp", sep=""))
}
ncols <- length(unique(soil_water_permeability_cut$Ksat_rep) - 1)
cols <- col_vector_ordered(ncols)
#change 0 to gray since 0 is N/A
cols <- c("gray", cols)
soil_colors <- cols[as.factor(soil_water_permeability_cut$Ksat_rep)]
png(filename=paste("Outputs/Env_output_plots/soil_water_permeability_", chosen_island, ".png", sep=""))
plot(soil_water_permeability_cut, col=soil_colors, border=NA)
title("Soil Water Permeablity")
legend <- c("Not Available", "Slow", "Moderate", "Fast", "Very Fast")
cols <- col_vector_ordered(length(legend) - 1)
cols <- c("gray", cols)
legend("bottomright",   # location of legend
legend=legend,
fill=cols)
dev.off()
# Chunk 35
#BEFORE
if (!file.exists(paste("Data/Environmental_data/TNC Ecosystems Before and Current/Before_Ecosystems_wgs84_", chosen_island, ".shp", sep=""))){
tnc_before <- vect("Data/Environmental_data/TNC Ecosystems Before and Current/Before_Ecosystems.shp")
tnc_before_cut <- crop(tnc_before, chosen_map_utm4N)
tnc_before_cut <- project(tnc_before_cut, cloud_frequency_cut)
writeVector(tnc_before_cut, paste("Data/Environmental_data/TNC Ecosystems Before and Current/Before_Ecosystems_wgs84_", chosen_island, ".shp", sep=""))
rm(tnc_before)
gc()
} else {
tnc_before_cut <- vect(paste("Data/Environmental_data/TNC Ecosystems Before and Current/Before_Ecosystems_wgs84_", chosen_island, ".shp", sep=""))
}
tnc_ecosystems <- c("Lowland Dry Forest & Shrubland", "Lowland Dry Shrubland & Grassland", "Lowland Dry Ecosystems", "Lowland Mesic Forest & Shrubland", "Lowland Wet Forest & Shrubland", "Montane Wet Forest & Shrubland", "Wetland", "Dry Cliff", "Wet Cliff", "Non-native", "water")
ncols <- length(tnc_ecosystems)
cols=sample(col_vector_random, ncols)
ecosystems_colors <- cols[factor(tnc_before_cut$COMMUNITY, ordered=TRUE, levels=tnc_ecosystems)]
png(filename=paste("Outputs/Env_output_plots/tnc_before_", chosen_island, ".png", sep=""))
plot(tnc_before_cut, col=ecosystems_colors, border=NA, mar = c(2.1,4.1,4.1,10))
title("TNC Ecosystems Before")
legend("bottomright",   # location of legend
legend=tnc_ecosystems,
fill=cols,
inset=c(-.4, 0),
xpd=TRUE,
cex = 0.7)
dev.off()
#CURRENT
if (!file.exists(paste("Data/Environmental_data/TNC Ecosystems Before and Current/Current_Ecosystems_wgs84_", chosen_island, ".shp", sep=""))){
tnc_current <- vect("Data/Environmental_data/TNC Ecosystems Before and Current/Current_Ecosystems.shp")
tnc_current_cut <- crop(tnc_current, chosen_map_utm4N)
tnc_current_cut <- project(tnc_current_cut, cloud_frequency_cut)
writeVector(tnc_current_cut, paste("Data/Environmental_data/TNC Ecosystems Before and Current/Current_Ecosystems_wgs84_", chosen_island, ".shp", sep=""))
rm(tnc_current)
gc()
} else {
tnc_current_cut <- vect(paste("Data/Environmental_data/TNC Ecosystems Before and Current/Current_Ecosystems_wgs84_", chosen_island, ".shp", sep=""))
}
ecosystems_colors <- cols[factor(tnc_current_cut$COMMUNITY, ordered=TRUE, levels=tnc_ecosystems)]
png(filename=paste("Outputs/Env_output_plots/tnc_current_", chosen_island, ".png", sep=""))
plot(tnc_current_cut, col=ecosystems_colors, border=NA, mar = c(2.1,4.1,4.1,10))
title("TNC Ecosystems Current")
legend("bottomright",   # location of legend
legend=tnc_ecosystems,
fill=cols,
inset=c(-.4, 0),
xpd=TRUE,
cex = 0.7)
dev.off()
# Chunk 36
wet_canopy_evaporation <- raster("Data/Environmental_data/Wet Canopy Evaporation/mm/WetCanopyEvaporation_mm_month_raster/wet_canopy_evaporation_mm_month_raster/wce_mm_ann/prj.adf")
#wet_canopy_evaporation <- projectRaster(wet_canopy_evaporation, crs = project_crs)
wet_canopy_evaporation_cut <- mask(wet_canopy_evaporation, chosen_map)
wet_canopy_evaporation_cut <- crop(wet_canopy_evaporation_cut, chosen_map)
png(filename=paste("Outputs/Env_output_plots/wet_canopy_evaporation_", chosen_island, ".png", sep=""))
plot(wet_canopy_evaporation_cut)
title("Wet Canopy Evaporation")
dev.off()
# Chunk 37
wind_speed <- vect("Data/Environmental_data/Wind Speed GIS/30m above ground/Wind_Speed_30m/Wind_Speed_30m.shp")
#wind_speed <- projectRaster(wind_speed, crs = project_crs)
wind_speed_cut <- terra::intersect(wind_speed, vect(chosen_map))
wind_speed_cut <- crop(wind_speed_cut, chosen_map)
ncols <- length(unique(wind_speed_cut$speed_mps))
cols <- col_vector_ordered(ncols)
wind_colors <- cols[factor(wind_speed_cut$speed_mps, ordered = TRUE)]
png(filename=paste("Outputs/Env_output_plots/wind_speed_", chosen_island, ".png", sep=""))
plot(wind_speed_cut, col=wind_colors)
lines(chosen_map)
title("Wind Speed")
legend("right",   # location of legend
legend=sort(unique(wind_speed_cut$speed_mps)),
fill=cols,
cex=0.6)
dev.off()
snail_data_sf_filtered <- snail_data_sf %>%
filter(coordinateUncertaintyInMeters <= 1000) %>%  # Remove points with an uncertainty of higher than a number
distinct(geometry, .keep_all = TRUE)  # Keep only distinct points based on geometry (lat and long)
#change points to polygons with uncertainty
snail_data_sf_uncertainty <- st_buffer(snail_data_sf_filtered, snail_data_sf_filtered$coordinateUncertaintyInMeters)
# Create lists of data
env_rasters_qual <- c(actual_evapotranspiration_cut = actual_evapotranspiration_cut,
available_soil_moisture_cut = available_soil_moisture_cut,
annual_mean_temperature = annual_mean_temperature,
mean_diurnal_range = mean_diurnal_range,
isothermality = isothermality,
temperature_seasonality = temperature_seasonality,
max_temperature = max_temperature,
min_temperature = min_temperature,
annual_temperature_range = annual_temperature_range,
temperature_wet = temperature_wet,
temperature_dry = temperature_dry,
temperature_warm = temperature_warm,
temperature_cold = temperature_cold,
precipitation = precipitation,
precipitation_wet = precipitation_wet,
precipitation_dry = precipitation_dry,
precipitation_seasonality = precipitation_seasonality,
precipitation_warm = precipitation_warm,
precipitation_cold = precipitation_cold,
canopy_wetness_fraction_cut = canopy_wetness_fraction_cut,
cloud_frequency_cut = cloud_frequency_cut,
elevation_cut = elevation_cut,
existing_vegetation_cover_cut = existing_vegetation_cover_cut,
existing_vegetation_height_cut = existing_vegetation_height_cut,
fog_cover_cut = fog_cover_cut,
forest_canopy_base_height_cut = forest_canopy_base_height_cut,
forest_canopy_bulk_density_cut = forest_canopy_bulk_density_cut,
forest_canopy_cover_cut = forest_canopy_cover_cut,
forest_canopy_height_cut = forest_canopy_height_cut,
leaf_area_index_cut = leaf_area_index_cut,
relative_humidity_cut = relative_humidity_cut,
slope_degrees_cut = slope_degrees_cut,
slope_percent_rise_cut = slope_percent_rise_cut,
soil_evaporation_cut = soil_evaporation_cut,
wet_canopy_evaporation_cut = wet_canopy_evaporation_cut
)
env_rasters_class <- c(existing_vegetation_type_cut = existing_vegetation_type_cut)
env_shapes_qual <- c(soil_nutrient_holding_capacity_cut = soil_nutrient_holding_capacity_cut,
soil_organic_matter_cut = soil_organic_matter_cut,
soil_ph_cut = soil_ph_cut,
soil_shrink_and_swell_cut = soil_shrink_and_swell_cut,
soil_water_permeability_cut = soil_water_permeability_cut
)
env_shapes_class <- c(soil_fertility_class_cut = soil_fertility_class_cut,
tnc_before_cut = tnc_before_cut,
tnc_current_cut = tnc_current_cut)
#wind_speed_cut
snail_data_sf_uncertainty
polygon(snail_data_sf_uncertainty)
points(snail_data_sf_uncertainty)
#env_rasters_qual
snail_env_data <- data.frame()
assign("snail_env_data", TRUE, env=globalenv())
tryCatch ({
env_values <- as.data.frame(lapply(env_rasters_qual, function(raster) {
extract(raster, snail_data_sf_uncertainty, method = "simple", fun = mean)
}))
snail_env_data <- cbind(snail_data_sf_uncertainty, env_values)
}, error = function(e) {
assign("snail_env_data", snail_data_sf_uncertainty, env=globalenv())
})
#env_rasters_class
#env_shapes_qual
#extract(soil_nutrient_holding_capacity_cut[,11], vect(snail_data_sf_uncertainty))
#env_shapes_class
snail_env_data
plot(snail_env_data)
#env_rasters_qual
exclosures_env_data <- data.frame()
assign("exclosures_env_data", TRUE, env=globalenv())
tryCatch ({
env_values <- as.data.frame(lapply(env_rasters_qual, function(raster) {
extract(raster, exclosure_data_sf, method = "simple", fun = mean)
}))
exclosures_env_data <- cbind(exclosure_data_sf, env_values)
}, error = function(e) {
assign("exclosures_env_data", exclosure_data_sf, env=globalenv())
})
#env_rasters_class
#env_shapes_qual
#env_shapes_class
exclosures_env_data
# note this only works when all occurrences are on one island
plots_list <- vector("list", length = length(env_rasters_qual))
group <- toTitleCase(chosen_island)
for (i in seq_along(plots_list)) {
filename=paste("Outputs/1D_plots/", names(env_rasters_qual[i]), "_", chosen_island, ".jpg", sep="")
col_name <- names(env_rasters_qual[i])
all_cut_data <- data.frame(as.data.frame(get(col_name)), group=group)
if(ncol(snail_env_data) > 14){
micans_data <- data.frame(as.data.frame(snail_env_data[i+13])[,1], group="Amastra micans")
colnames(micans_data) <- colnames(all_cut_data)
comb_data <- rbind(all_cut_data, micans_data)
comb_data <- comb_data[complete.cases(comb_data), ]
plots_list[[i]] <- ggplot(comb_data, aes(x = .data[[colnames(as.data.frame(get(col_name)))]])) +
geom_histogram(aes(y = ..ncount.., fill=group, color=group), bins = 40, alpha = 0.6, position = "identity") +
geom_vline(xintercept = as.data.frame(exclosures_env_data[, i+2])[,1],
color = "red", linetype = "solid", linewidth = .5) +
geom_text(data = data.frame(x = as.data.frame(exclosures_env_data[, i+2])[,1],
label = as.data.frame(exclosures_env_data[, 2])[,1]),
aes(x = x, y=0, label = label), vjust = -0.5, hjust = 0, color = "black", angle = 90, size = 3.5) +
labs(title = paste(names(env_rasters_qual[i]), "_", chosen_island, sep=""),
x = names(env_rasters_qual[i]),
y = "Scaled Density") +
xlim(c(env_rasters_qual[i][[names(env_rasters_qual[i])]]@data@min, env_rasters_qual[i][[names(env_rasters_qual[i])]]@data@max)) +
theme_minimal()
} else {
comb_data <- all_cut_data
comb_data <- comb_data[complete.cases(comb_data), ]
plots_list[[i]] <- ggplot(comb_data, aes(x = .data[[colnames(as.data.frame(get(col_name)))]])) +
geom_histogram(aes(y = ..ncount..), bins = 40, alpha = 0.6, position = "identity", color="#01bdc3", fill="#66d9dc") +
labs(title = paste(names(env_rasters_qual[i]), "_", chosen_island, sep=""),
x = names(env_rasters_qual[i]),
y = "Scaled Density") +
xlim(c(env_rasters_qual[i][[names(env_rasters_qual[i])]]@data@min, env_rasters_qual[i][[names(env_rasters_qual[i])]]@data@max)) +
theme_minimal()
}
ggsave(filename, plots_list[[i]], device = "jpg")
}
#plot_grid(plotlist = plots_list[1:8], nrow = 4, align = "h")
#plot_grid(plotlist = plots_list[9:16], nrow = 4, align = "h")
#plot_grid(plotlist = plots_list[17:24], nrow = 4, align = "h")
#plot_grid(plotlist = plots_list[25:32], nrow = 4, align = "h")
#plot_grid(plotlist = plots_list[33:35], nrow = 3, align = "h")
all_iterations_df <- data.frame(Exclosure = character())
group <- toTitleCase(chosen_island)
for (i in 1:35) {
filename=paste("Outputs/1D_plots/", colnames(snail_env_data[, 14:49])[i], ".jpg", sep="")
col_name <- colnames(snail_env_data[, 14:49])[i]
all_cut_data <- data.frame(as.data.frame(get(col_name)), group=group)
micans_data <- data.frame(as.data.frame(snail_env_data[i+13])[,1], group="Amastra micans")
colnames(micans_data) <- colnames(all_cut_data)
comb_data <- rbind(all_cut_data, micans_data)
comb_data <- comb_data[complete.cases(comb_data), ]
#rank the exclosures
cut_numbers <- cut(as.data.frame(exclosures_env_data[, i+2])[,1], breaks = hist(comb_data[[1]], plot = FALSE, breaks = 40)$breaks, include.lowest = TRUE)
frequency_table <- table(cut(micans_data[[1]], breaks = hist(comb_data[[1]], plot = FALSE, breaks = 40)$breaks, include.lowest = TRUE))
data_to_rank <- data.frame(Exclosure = as.data.frame(exclosures_env_data[, 1])[,1], Bin = cut_numbers)
ranked_exclosures <- data_to_rank %>%
left_join(data.frame(Bin = names(frequency_table), Freq = as.numeric(frequency_table)), by = "Bin") %>%
arrange(desc(Freq), Exclosure) %>%
select(Exclosure, Freq)
ranked_exclosures <- ranked_exclosures %>%
mutate(Rank = dense_rank(desc(Freq))) %>%
select(Exclosure, Rank)
colnames(ranked_exclosures) <- c("Exclosure", colnames(snail_env_data[, 14:49])[i])
all_iterations_df <- merge(all_iterations_df, ranked_exclosures, by = "Exclosure", all = TRUE)
}
all_iterations_df$Sum <- rowSums(all_iterations_df[, -1, drop = FALSE])
all_iterations_df$Mean <- rowMeans(all_iterations_df[, -c(1, ncol(all_iterations_df)), drop = FALSE])
all_iterations_df <- all_iterations_df[order(all_iterations_df$Sum, decreasing = FALSE), ]
write.csv(all_iterations_df, file = "Outputs/exclosure_rankings.csv", row.names=FALSE)
#595 combinations so don't loop through them all, just pick two
xenvdata <- "relative_humidity_cut"
yenvdata <- "slope_degrees_cut"
group <- toTitleCase(chosen_island)
filename=paste("Outputs/2D_plots/", xenvdata, "_", yenvdata, ".jpg", sep="")
all_cut_data <- data.frame(as.data.frame(get(xenvdata)), as.data.frame(get(yenvdata)), group=group)
micans_data <- data.frame(as.data.frame(snail_env_data[xenvdata])[,1], as.data.frame(snail_env_data[yenvdata])[,1], group="Amastra micans")
colnames(micans_data) <- colnames(all_cut_data)
comb_data <- rbind(all_cut_data, micans_data)
comb_data <- comb_data[complete.cases(comb_data), ]
exclosure_data <- data.frame(as.data.frame(exclosures_env_data[, xenvdata])[,1], as.data.frame(exclosures_env_data[, yenvdata])[,1], as.data.frame(exclosures_env_data[, 2])[,1])
colnames(exclosure_data) <- c(xenvdata, yenvdata, "Exclosure")
plot <- ggplot(comb_data, aes(x = .data[[colnames(as.data.frame(get(xenvdata)))]],
y = .data[[colnames(as.data.frame(get(yenvdata)))]])) +
geom_point(aes(fill=group, color=group), alpha = 0.5, position = "identity") +
geom_point(data = exclosure_data, aes(x = .data[[colnames(exclosure_data)[1]]],
y = .data[[colnames(exclosure_data)[2]]]), color = "red", shape = 17, size = 3) +
geom_text(data = exclosure_data, aes(x = .data[[colnames(exclosure_data)[1]]],
y = .data[[colnames(exclosure_data)[2]]],
label = .data[[colnames(exclosure_data)[3]]]),
vjust = -.8, hjust = 0, color = "black", size = 3.5) +
labs(title = paste(xenvdata, "x", yenvdata),
x = xenvdata,
y = yenvdata) +
theme_minimal()
plot
ggsave(filename, plot, device = "jpg")
xenvdata <- "annual_mean_temperature"
yenvdata <- "precipitation"
zenvdata <- "slope_degrees_cut"
group <- toTitleCase(chosen_island)
filename=paste("Outputs/3D_plots/", xenvdata, "_", yenvdata, "_", zenvdata, ".html", sep="")
all_cut_data <- data.frame(as.data.frame(get(xenvdata)), as.data.frame(get(yenvdata)), as.data.frame(get(zenvdata)), group=group)
micans_data <- data.frame(as.data.frame(snail_env_data[xenvdata])[,1], as.data.frame(snail_env_data[yenvdata])[,1], as.data.frame(snail_env_data[zenvdata])[,1], group="Amastra micans")
colnames(micans_data) <- colnames(all_cut_data)
comb_data <- rbind(all_cut_data, micans_data)
comb_data <- comb_data[complete.cases(comb_data), ]
exclosure_data <- data.frame(as.data.frame(exclosures_env_data[, xenvdata])[,1], as.data.frame(exclosures_env_data[, yenvdata])[,1], as.data.frame(exclosures_env_data[, zenvdata])[,1],as.data.frame(exclosures_env_data[, 2])[,1])
colnames(exclosure_data) <- c(xenvdata, yenvdata, zenvdata, "Exclosure")
plot <- plot_ly(comb_data, x = comb_data[[colnames(as.data.frame(get(xenvdata)))]],
y = comb_data[[colnames(as.data.frame(get(yenvdata)))]],
z = comb_data[[colnames(as.data.frame(get(zenvdata)))]],
color = ~group, colors = c("#fbada7", "#66d9dc"),
marker = list(size = 3, opacity = 1),
text = ~paste("Group: ", group),
type = "scatter3d", mode = "markers") %>%
add_trace(x = exclosure_data[[colnames(exclosure_data)[1]]],
y = exclosure_data[[colnames(exclosure_data)[2]]],
z = exclosure_data[[colnames(exclosure_data)[3]]],
type = "scatter3d",
mode = "markers+text",
inherit=FALSE,
marker = list(size = 4, color = "red", symbol = 'diamond'),
text = exclosure_data[[colnames(exclosure_data)[4]]]) %>%
layout(title = paste(xenvdata, "x", yenvdata, "x", zenvdata),
scene = list(xaxis = list(title = xenvdata),
yaxis = list(title = yenvdata),
zaxis = list(title = zenvdata),
camera = list(eye = list(x = 2.2,y = 0, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)))) %>%
onRender("
function(el, x){
var id = el.getAttribute('id');
var gd = document.getElementById(id);
Plotly.update(id).then(attach);
function attach() {
var cnt = 0;
function run() {
rotate('scene', Math.PI / 550);
requestAnimationFrame(run);
}
run();
function rotate(id, angle) {
var eye0 = gd.layout[id].camera.eye
var rtz = xyz2rtz(eye0);
rtz.t += angle;
var eye1 = rtz2xyz(rtz);
Plotly.relayout(gd, id + '.camera.eye', eye1)
}
function xyz2rtz(xyz) {
return {
r: Math.sqrt(xyz.x * xyz.x + xyz.y * xyz.y),
t: Math.atan2(xyz.y, xyz.x),
z: xyz.z
};
}
function rtz2xyz(rtz) {
return {
x: rtz.r * Math.cos(rtz.t),
y: rtz.r * Math.sin(rtz.t),
z: rtz.z
};
}
};
}
")
plot
htmlwidgets::saveWidget(as_widget(plot), filename)
